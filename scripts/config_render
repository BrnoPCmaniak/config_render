#!/usr/bin/env python
import sys

from argparse import SUPPRESS, Action, ArgumentParser, RawDescriptionHelpFormatter

from jinja2.exceptions import TemplateNotFound
from os.path import expandvars

from config_render import ConfigRender, __version__, Parser, ConfigRenderException


CONFIG_HELP = """This help describdes how the config file should look like.

# Default Configuration
default:
  # Path to template
  # This is can be override by -t option
  template_path: foo.template
  # Enviroment template varible
  # if specified we first try to use it if not we fallback to template_path
  template_path_var: SOME_TEMPLATE_PATH
  # This is can be override by -o option
  output_file_path: foo.cfg
  # if specified we first try to use if not we fallback to output_file_path
  output_file_path_var: SOME_OUTPUT_PATH
  # Load varibles from system environment
  # env_variables are superior to varibles
  env_variables:
    ip_adress: DJANGO_IP_ADDR
    hostname: DJANGO_HOSTNAME
    db_hostname: DB_HOSTNAME
  variables:
  # false, off is parsed as python False if you wan to use them as string
  # use "off"
      debug: off
    server_https: "on" # Non boolean value
    db_type: postgresql
    ip_adress: 127.0.0.1 # fallback if DAJNGO_IP_ADDR does not exist
mysql:
  template_path: mysql.template
  output_file: $HOME/mysql_dir
  variables:
    user: django
    password: django
    ip_adress: 127.0.0.1


Warning:
* Numbers are automaticly convered to ints.
* '~' or 'null' is converted to None
* 'false', 'true', 'on', 'off' are converted to boolean.
* If you want to use one of these put them inside '' or ""
* Inline comments are denoted with ' #' (space then #).
"""

EPILOG = """
Copyright (C) 2016 Filip Dobrovolny
"""

VERSION_TEXT = "%%(prog)s %s\n\nCopyright (C) 2016 Filip Dobrovolny\nLicense: MIT" % __version__
DESCRIPTION = "Render your files with Jinja2 templates."


class HelpConfig(Action):
    def __init__(self, option_strings, dest=SUPPRESS, default=SUPPRESS, help=None):
        super(HelpConfig, self).__init__(option_strings=option_strings, dest=dest, default=default,
                                         nargs=0, help=help)

    def __call__(self, parser, namespace, values, option_string=None):
        parser._print_message(CONFIG_HELP)
        parser.exit()


parser = ArgumentParser(version=VERSION_TEXT, description=DESCRIPTION,
                        formatter_class=RawDescriptionHelpFormatter, epilog=EPILOG)
parser.register("action", "help_config", HelpConfig)
parser.add_argument("-ch", "--config-help", help="show config file help and exit",
                    action="help_config")
parser.add_argument("-n", "--name", metavar="config_name", type=str, default=None,
                    help="Name of configuration to be used.")
parser.add_argument("config", help="YAML config file")
parser.add_argument("-t", "--template_name", help="Template file", metavar="template")
parser.add_argument("-o", "--output_file", help="Output File", metavar="FILE")

args = parser.parse_args()
with open(expandvars(args.config), "r") as f:
    conf = Parser(f).parse()

conf_render = ConfigRender()

try:
    configuration = conf[args.name].write(conf_render, template_name=args.template_name,
                                          output_file=args.output_file)
except (ConfigRenderException, TemplateNotFound) as e:
    sys.tracebacklimit = 0
    raise
